{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "datapoints_ex.ipynb のコピー",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shu-taka/hello-world/blob/master/datapoints_ex.tree.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LgAiGAHOqK5j",
        "colab_type": "code",
        "outputId": "694b8aa2-cda7-4977-f491-800096a37a11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        }
      },
      "source": [
        "import glob\n",
        "import json\n",
        "import os\n",
        "import requests\n",
        "\n",
        "\n",
        "# それぞれの記号等が示す意味等を定義づけする。\n",
        "\n",
        "class DataPoint():\n",
        "    \"\"\"\n",
        "    mc_y: 29(blue), 30(yellow), 31(red)\n",
        "    mc_m: 326(auto), 327(manual), \n",
        "          328(in_op), \n",
        "          6908(normal), 6909(power), 6916(break-in), 6907(eco)\n",
        "    \"\"\"\n",
        "    \"\"\"\n",
        "    attrs = {}\n",
        "    blue = None\n",
        "    yellow = None\n",
        "    red = None\n",
        "    auto = None\n",
        "    manual = None\n",
        "    in_op = None\n",
        "    normal = None\n",
        "    power = None\n",
        "    break_in = None\n",
        "    eco = None\n",
        "    label = None\n",
        "    \"\"\"\n",
        "    \n",
        "    def __init__(self, attrs):\n",
        "        self.attrs = attrs\n",
        "        # print(self.attrs)\n",
        "        self.blue = self.attrs['mc_y_29']\n",
        "        self.yellow = attrs['mc_y_30']\n",
        "        self.red = attrs['mc_y_31']\n",
        "        \n",
        "        self.auto = attrs['mc_m_326']\n",
        "        self.manual = attrs['mc_m_327']\n",
        "       \n",
        "        self.in_op = attrs['mc_m_328']\n",
        "        \n",
        "        self.normal = attrs['mc_m_6908']\n",
        "        self.power = attrs['mc_m_6909']\n",
        "        self.break_in = attrs['mc_m_6916']\n",
        "        self.eco = attrs['mc_m_6907']\n",
        "        \n",
        "        self.label = self.get_label()\n",
        "        \n",
        "    def get_color(self):\n",
        "        if self.blue: return 'blue'\n",
        "        if self.red: return 'red'\n",
        "        if self.yellow: return 'yellow'\n",
        "        return 'none'\n",
        "\n",
        "    def get_motion(self):\n",
        "        if self.auto: return 'auto'\n",
        "        if self.manual: return 'manual'\n",
        "        return 'none'\n",
        "\n",
        "    def get_op_state(self):\n",
        "        return 'op' if self.in_op else 'none'\n",
        "\n",
        "    def get_mode(self):\n",
        "        if self.normal: return 'normal'\n",
        "        if self.power: return 'power'\n",
        "        if self.break_in: return 'breakin'\n",
        "        if self.eco: return 'eco'\n",
        "        return 'none'\n",
        "\n",
        "    def get_label(self):\n",
        "        return '_'.join([self.get_color(), self.get_motion(), self.get_op_state(), self.get_mode()]) \n",
        "\n",
        "\n",
        "# データの一本化を行う。\n",
        "# for文を使用し、それぞれのファイルをtotal_listにリスト化する。        \n",
        "\n",
        "total_list = []\n",
        "json_file = 'https://raw.githubusercontent.com/joshnn/ST_project/master/20191104/DataPoints_all.json?token=AM7PJU6FPQ6A2JICSH3R7WK5YHR72'\n",
        "res = requests.get(json_file)\n",
        "# print(res.text)\n",
        "data_points_list = json.loads(res.text)\n",
        "total_list = []\n",
        "\n",
        "# dpをクラス化させて、それぞれの記号をクラスで定義されたキーに変換すると共に、各ファイルを綺麗な辞書へと変換させることを検討\n",
        "for dp_dict in data_points_list:\n",
        "    attrs_to_set = {}\n",
        "    for k, v in dp_dict.items():\n",
        "        #print('v={}'.format(v))\n",
        "        \n",
        "        if type(v) is int:\n",
        "            attrs_to_set[k] = v\n",
        "        if type(v) is dict:\n",
        "            # print('type is dict')\n",
        "            for addr in v.keys():\n",
        "                attrs_to_set['{}_{}'.format(k, addr)] = v[addr]\n",
        "    \n",
        "    dp = DataPoint(attrs_to_set)\n",
        "    total_list.append(dp)\n",
        "\n",
        "import sklearn\n",
        "from sklearn.model_selection import train_test_split     \n",
        "#X, y = mglearn.datasets.make_forge()\n",
        "\n",
        "#print(total_list)     \n",
        "feature_names = [\n",
        "    'blue',\n",
        "    'yellow',\n",
        "    'red',\n",
        "    'auto',\n",
        "    'manual',\n",
        "    'in_op',\n",
        "    'normal',\n",
        "    'power',\n",
        "    'break_in',\n",
        "]\n",
        "y = [dp.get_label() for dp in total_list]\n",
        "X = []\n",
        "for dp in total_list:\n",
        "    vec = []\n",
        "    for f in feature_names:\n",
        "        vec.append(getattr(dp, f))\n",
        "    X.append(vec)\n",
        "\n",
        "# limit to first N samples\n",
        "SAMPLES = 10\n",
        "print(X_test[:SAMPLES], y_test[:SAMPLES])\n",
        "\n",
        "# t-SNEによる可視化をセットする。\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n",
        "tree = DecisionTreeClassifier(random_satate = 0)\n",
        "tree.fit(X_train, y_train)\n",
        "print('Accurancy on training set:{:.3f}'.format(tree.score(X_train, y_train)))\n",
        "print('Accurancy on test set: {:.3f}'.format(tree.score(X_test, y_test)))\n",
        "\n",
        "\n",
        "from sklearn.tree import export_graphviz\n",
        "export_graphviz(tree, out_file='tree.dot',　Class_names=['malignant', 'benign'], feature_names=feature_names, impurity=False, filled=True)\n",
        "\n",
        "import graphviz\n",
        "\n",
        "with open('tree.dot') as f:\n",
        "  dot_graph = f.read()\n",
        "graphviz.source(dot_graph)\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-15-640a3e5c0327>\"\u001b[0;36m, line \u001b[0;32m139\u001b[0m\n\u001b[0;31m    export_graphviz(tree, out_file='tree.dot',　Class_names=['malignant', 'benign'], feature_names=feature_names, impurity=False, filled=True)\u001b[0m\n\u001b[0m                                              　          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"
          ]
        }
      ]
    }
  ]
}